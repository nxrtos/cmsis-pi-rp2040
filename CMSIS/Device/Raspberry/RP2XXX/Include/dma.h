#ifndef __DMA_H
#define __DMA_H

#include "RP20xx.h"

typedef enum {
    DMA_DREQ_PIO0_TX0   = 0x0 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_TX1   = 0x1 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_TX2   = 0x2 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_TX3   = 0x3 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_RX0   = 0x4 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_RX1   = 0x5 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_RX2   = 0x6 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO0_RX3   = 0x7 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_TX0   = 0x8 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_TX1   = 0x9 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_TX2   = 0xA << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_TX3   = 0xB << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_RX0   = 0xC << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_RX1   = 0xD << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_RX2   = 0xE << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PIO1_RX3   = 0xF << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_SPI0_TX    = 0x10 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_SPI0_RX    = 0x11 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_SPI1_TX    = 0x12 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_SPI1_RX    = 0x13 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_UART0_TX   = 0x14 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_UART0_RX   = 0x15 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_UART1_TX   = 0x16 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_UART1_RX   = 0x17 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP0  = 0x18 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP1  = 0x19 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP2  = 0x1A << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP3  = 0x1B << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP4  = 0x1C << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP5  = 0x1D << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP6  = 0x1E << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_PWM_WRAP7  = 0x1F << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_I2C0_TX    = 0x20 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_I2C0_RX    = 0x21 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_I2C1_TX    = 0x22 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_I2C1_RX    = 0x23 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_ADC        = 0x24 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_XIP_STREAM = 0x25 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_XIP_SSITX  = 0x26 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_DREQ_XIP_SSIRX  = 0x27 << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_TREQ_TIMER0     = 0x3B << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_TREQ_TIMER1     = 0x3C << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_TREQ_TIMER2     = 0x3D << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_TREQ_TIMER3     = 0x3E << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
    DMA_TREQ_PERMANENT  = 0x3F << DMA_CH0_CTRL_TRIG_TREQ_SEL_Pos,
} eDMA_Requests;

typedef enum {
    DMA_DATA_SIZE_8B  = 0x01 << DMA_CH0_CTRL_TRIG_DATA_SIZE_Pos,
    DMA_DATA_SIZE_16B = 0x02 << DMA_CH0_CTRL_TRIG_DATA_SIZE_Pos,
    DMA_DATA_SIZE_32B = 0x03 << DMA_CH0_CTRL_TRIG_DATA_SIZE_Pos,
} eDMA_DataSize;

typedef enum {
    DMA_WRAP_NONE  = 0x00 << DMA_CH0_CTRL_TRIG_RING_SEL_Pos,
    DMA_WRAP_READ  = 0x00 << DMA_CH0_CTRL_TRIG_RING_SEL_Pos,
    DMA_WRAP_WRITE = 0x01 << DMA_CH0_CTRL_TRIG_RING_SEL_Pos,
} eDMA_RingSel;

typedef enum {
    DMA_DISABLE,
    DMA_ENABLE
} eDMA_Enable;

typedef struct {
    eDMA_Enable   high_prio;
    eDMA_DataSize data_size;
    eDMA_Enable   incr_data;
    eDMA_Enable   incr_peri;
    eDMA_Requests request;
} tDMA_Config;

void DMA_Init(uint32_t channel, tDMA_Config *config);
void DMA_TransferConfig(uint32_t channel, uint32_t read_address, uint32_t write_address, uint32_t size);
void DMA_TransferStart(uint32_t channel);

#endif